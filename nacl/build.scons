#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import make_nacl_env
import nacl_utils
import os

nacl_env = make_nacl_env.NaClEnvironment(
    use_c_plus_plus_libs=True, nacl_platform=os.getenv('NACL_TARGET_PLATFORM'))

Repository ( "../3rdparty", "../src" )

lua_sources = [ os.path.join( 'moai-lua-5.1.3/src', src_file ) for src_file in [
				  'lapi.c',
				  'lauxlib.c',
				  'lbaselib.c',
				  'lcode.c',
				  'ldblib.c',
				  'ldebug.c',
				  'ldo.c',
				  'ldump.c',
				  'lfunc.c',
				  'lgc.c',
				  'linit.c',
				  'liolib.c',
				  'llex.c',
				  'lmathlib.c',
				  'lmem.c',
				  'loadlib.c',
				  'lobject.c',
				  'lopcodes.c',
				  'loslib.c',
				  'lparser.c',
				  'lstate.c',
				  'lstring.c',
				  'lstrlib.c',
				  'ltable.c',
				  'ltablib.c',
				  'ltm.c',
				  #'luac.c',
				  'lundump.c',
				  'lvm.c',
				  'lzio.c',
				  'print.c',
]]

zlib_sources = [ os.path.join( 'zlib-1.2.3', src_file ) for src_file in [
					'adler32.c'   ,
					'compress.c'  ,
					'crc32.c'     ,
					'deflate.c'   ,
					#'example.c'   ,
					'gzio.c'      ,
					'infback.c'   ,
					'inffast.c'   ,
					'inflate.c'   ,
					'inftrees.c'  ,
					#'minigzip.c'  ,
					'trees.c'     ,
					'uncompr.c'   ,
					'zutil.c'     ,
]]

tinyxml_sources = [ os.path.join( 'tinyxml', src_file ) for src_file in [
					'tinystr.cpp',
					'tinyxml.cpp',
					'tinyxmlerror.cpp',
					'tinyxmlparser.cpp',
]]

jansson_sources = [ os.path.join( 'jansson-2.1\src', src_file ) for src_file in [
					'dump.c',
					'error.c',
					'hashtable.c',
					'load.c',
					'memory.c',
					'pack_unpack.c',
					'strbuffer.c',
					'utf.c',
					'value.c',
]]

expat_sources = [ os.path.join( 'expat-2.0.1\lib', src_file ) for src_file in [
					'xmlparse.c',
					'xmlrole.c',
					'xmltok.c',
					'xmltok_impl.c',
					'xmltok_ns.c',
]]

libpng_sources = [ os.path.join( 'lpng140', src_file ) for src_file in [
					'example.c' ,
					'png.c'     ,
					'pngerror.c',
					'pngget.c'  ,
					'pngmem.c'  ,
					'pngpread.c',
					'pngread.c' ,
					'pngrio.c'  ,
					'pngrtran.c',
					'pngrutil.c',
					'pngset.c'  ,
					#'pngtest.c' ,
					'pngtrans.c',
					'pngwio.c'  ,
					'pngwrite.c',
					'pngwtran.c',
					'pngwutil.c',
]]

libjpg_sources = [ os.path.join( 'jpeg-8c', src_file ) for src_file in [
					'jcapimin.c'	,
					'jcapistd.c'	,
					'jdapimin.c'	,
					'jdapistd.c'	,
					'jcomapi.c'	    ,
					'jcparam.c'	    ,
					'jctrans.c'	    ,
					'jdtrans.c'	    ,
					'jcinit.c'	    ,
					'jcmaster.c'	,
					'jcmainct.c'	,
					'jcprepct.c'	,
					'jccoefct.c'	,
					'jccolor.c'	    ,
					'jcsample.c'	,
					'jcdctmgr.c'	,
					'jfdctint.c'	,
					'jfdctfst.c'	,
					'jfdctflt.c'	,
					'jchuff.c'	    ,
					'jcarith.c'	    ,
					'jcmarker.c'	,
					'jdatadst.c'	,
					'jdmaster.c'	,
					'jdinput.c'	    ,
					'jdmainct.c'	,
					'jdcoefct.c'	,
					'jdpostct.c'	,
					'jdmarker.c'	,
					'jdhuff.c'	    ,
					'jdarith.c'	    ,
					'jddctmgr.c'	,
					'jidctint.c'	,
					'jidctfst.c'	,
					'jidctflt.c'	,
					'jdsample.c'	,
					'jdcolor.c'	    ,
					'jdmerge.c'	    ,
					'jquant1.c'	    ,
					'jquant2.c'	    ,
					'jdatasrc.c'	,
					'jaricom.c'	    ,
					'jerror.c'	    ,
					'jmemmgr.c'	    ,
					'jutils.c'	    ,
					'jmemnobs.c'	,
]]

contrib_sources = [ os.path.join( 'contrib', src_file ) for src_file in [
					'utf8.c' ,
]]

tlsf_sources = [ os.path.join( 'tlsf-2.0', src_file ) for src_file in [
					'tlsf.c' ,
]]

zipfs_sources = [ os.path.join( 'zipfs', src_file ) for src_file in [
					'zipfs.c',
					'zipfs_util.c',
					'zipfs_vfscanf.c',
					'ZIPFSString.c',
					'ZIPFSVirtualPath.c',
					'ZIPFSZipFile.c',
]]

box2d_path = os.path.join( 'box2d-2.2.1', 'Box2D' )
box2d_sources = [ os.path.join( box2d_path, src_file ) for src_file in [
					'Collision\\b2BroadPhase.cpp',
					'Collision\\b2CollideCircle.cpp',
					'Collision\\b2CollideEdge.cpp',
					'Collision\\b2CollidePolygon.cpp',
					'Collision\\b2Collision.cpp',
					'Collision\\b2Distance.cpp',
					'Collision\\b2DynamicTree.cpp',
					'Collision\\b2TimeOfImpact.cpp',
					'Collision\\Shapes\\b2ChainShape.cpp',
					'Collision\\Shapes\\b2CircleShape.cpp',
					'Collision\\Shapes\\b2EdgeShape.cpp',
					'Collision\\Shapes\\b2PolygonShape.cpp',
					'Common\\b2BlockAllocator.cpp',
					'Common\\b2Draw.cpp',
					'Common\\b2Math.cpp',
					'Common\\b2Settings.cpp',
					'Common\\b2StackAllocator.cpp',
					'Common\\b2Timer.cpp',
					'Dynamics\\b2Body.cpp',
					'Dynamics\\b2ContactManager.cpp',
					'Dynamics\\b2Fixture.cpp',
					'Dynamics\\b2Island.cpp',
					'Dynamics\\b2World.cpp',
					'Dynamics\\b2WorldCallbacks.cpp',
					'Dynamics\\Joints\\b2DistanceJoint.cpp',
					'Dynamics\\Joints\\b2FrictionJoint.cpp',
					'Dynamics\\Joints\\b2GearJoint.cpp',
					'Dynamics\\Joints\\b2Joint.cpp',
					'Dynamics\\Joints\\b2MouseJoint.cpp',
					'Dynamics\\Joints\\b2PrismaticJoint.cpp',
					'Dynamics\\Joints\\b2PulleyJoint.cpp',
					'Dynamics\\Joints\\b2RevoluteJoint.cpp',
					'Dynamics\\Joints\\b2RopeJoint.cpp',
					'Dynamics\\Joints\\b2WeldJoint.cpp',
					'Dynamics\\Joints\\b2WheelJoint.cpp',
					'Dynamics\\Contacts\\b2ChainAndCircleContact.cpp',
					'Dynamics\\Contacts\\b2ChainAndPolygonContact.cpp',
					'Dynamics\\Contacts\\b2CircleContact.cpp',
					'Dynamics\\Contacts\\b2Contact.cpp',
					'Dynamics\\Contacts\\b2ContactSolver.cpp',
					'Dynamics\\Contacts\\b2EdgeAndCircleContact.cpp',
					'Dynamics\\Contacts\\b2EdgeAndPolygonContact.cpp',
					'Dynamics\\Contacts\\b2PolygonAndCircleContact.cpp',
					'Dynamics\\Contacts\\b2PolygonContact.cpp',
					'Rope\\b2Rope.cpp',
]]

uslcore_sources = [ os.path.join( 'uslscore', src_file ) for src_file in [
					'STLString.cpp'           ,
					'USBase64Cipher.cpp'      ,
					'USByteStream.cpp'        ,
					#'USCanary.cpp'            ,
					'USCipher.cpp'            ,
					'USCipherStream.cpp'      ,
					'USDeflater.cpp'          ,
					#'USDeviceTime_posix.cpp'  ,
					'USDeviceTime_nacl.cpp'  ,
					'USDirectoryItr.cpp',
					'USFilename.cpp'          ,
					'USFileStream.cpp'        ,
					'USFileSys.cpp'           ,
					#'USGlobals.cpp'           ,
					'USInflater.cpp'          ,
					'USLog.cpp'               ,
					'uslscore-pch.cpp'        ,
					'uslscore.cpp'            ,
					#'USLuaObject.cpp'         ,
					#'USLuaRef.cpp'            ,
					#'USLuaRuntime.cpp'        ,
					#'USLuaSerializer.cpp'     ,
					#'USLuaState.cpp'          ,
					#'USLuaStateHandle.cpp'    ,
					'USMemStream.cpp'         ,
					#'USObject.cpp'            ,
					#'USRtti.cpp'              ,
					'USStream.cpp'            ,
					'USStreamFormatter.cpp'   ,
					'USZip.cpp'               ,
					'USZipFile.cpp'           ,
]]

uslext_sources = [ os.path.join('uslsext', src_file) for src_file in [
					'USAdapterInfo_posix.cpp' ,
					#'USAnimCurve.cpp'         ,
					#'USAttributed.cpp'        ,
					#'USAttrMap.cpp'           ,
					#'USAttrOp.cpp'            ,
					'USBox.cpp'               ,
					'USCgt.cpp'               ,
					'USColor.cpp'             ,
					'USCurve.cpp'             ,
					'USData.cpp'              ,
					'USDataIOTask.cpp'        ,
					'USDistance.cpp'          ,
					#'USHttpTask.cpp'          ,
					#'USHttpTaskInfo_nacl.cpp' ,
					'USHexDump.cpp'			  ,
					'USInterpolate.cpp'       ,
					'USIntersect.cpp'         ,
					'USLexStream.cpp'         ,
					'uslsext-pch.cpp'         ,
					'uslsext.cpp'             ,
					'USMercator.cpp'          ,
					'USMutex.cpp'             ,
					'USMutex_posix.cpp'       ,
					'USParser.cpp'            ,
					'USPlane.cpp'             ,
					'USPolar.cpp'             ,
					#'USPrettyPrint.cpp'      ,
					'USQuad.cpp'              ,
					'USQuadCoord.cpp'         ,
					'USSqlBinding.cpp'        ,
					'USSqlColumn.cpp'         ,
					'USSqlConnection.cpp'     ,
					'USSqlRecord.cpp'         ,
					'USSqlStatement.cpp'      ,
					'USSqlValue.cpp'          ,
					'USSurface2D.cpp'         ,
					'USSyntaxNode.cpp'        ,
					'USSyntaxScanner.cpp'     ,
					'USTask.cpp'              ,
					'USTaskThread.cpp'        ,
					'USThread.cpp'            ,
					'USThread_posix.cpp'      ,
					'USTrig.cpp'              ,
					'USTypedPtr.cpp'          ,
					#'USUrlMgr_nacl.cpp'      ,
					'USXmlReader.cpp'         ,
]]

aku_sources = [ os.path.join('aku', src_file) for src_file in [
				'AKU.cpp',
				'AKU-fmod.cpp',
]]

moai_sources = [ os.path.join('moaicore', src_file) for src_file in [
			    'MOAIAction.cpp'                 ,
				'MOAIActionMgr.cpp'              ,
				'MOAIAnim.cpp'                   ,
				'MOAIAnimCurve.cpp'              ,
				'MOAIBitmapFontRipper.cpp'       ,
				'MOAIBlendMode.cpp'              ,
				'MOAIBlocker.cpp'                ,
				'MOAIBox2DArbiter.cpp'           ,
				'MOAIBox2DBody.cpp'              ,
				'MOAIBox2DDebugDraw.cpp'         ,
				'MOAIBox2DDistanceJoint.cpp'	 ,
				'MOAIBox2DFixture.cpp'           ,
				'MOAIBox2DFrictionJoint.cpp'	 ,
				'MOAIBox2DGearJoint.cpp'		 ,
				'MOAIBox2DJoint.cpp'          	 ,
				'MOAIBox2DMouseJoint.cpp'        ,
				'MOAIBox2DPrismaticJoint.cpp'    ,
				'MOAIBox2DPulleyJoint.cpp'       ,
				'MOAIBox2DRevoluteJoint.cpp'     ,
				'MOAIBox2DRopeJoint.cpp'     ,
				'MOAIBox2DWeldJoint.cpp'         ,
				'MOAIBox2DWheelJoint.cpp'		 ,
				'MOAIBox2DWorld.cpp'             ,
				'MOAIButtonSensor.cpp'           ,
				'MOAICameraAnchor2D.cpp'         ,
				'MOAICameraFitter2D.cpp'         ,
				'MOAICanary.cpp'				 ,
				'MOAIColor.cpp'                  ,
				'MOAICompassSensor.cpp'          ,
				'moaicore-pch.cpp'               ,
				'moaicore.cpp'                   ,
				'MOAICp.cpp'                     ,
				'MOAICpArbiter.cpp'              ,
				'MOAICpBody.cpp'                 ,
				'MOAICpConstraint.cpp'           ,
				'MOAICpDebugDraw.cpp'            ,
				'MOAICpShape.cpp'                ,
				'MOAICpSpace.cpp'                ,
				'MOAIDataBuffer.cpp'             ,
				'MOAIDataIOAction.cpp'           ,
				'MOAIDebugLines.cpp'             ,
				'MOAIDeck.cpp'                   ,
				'MOAIDeck2D.cpp'                 ,
				'MOAIDeckRemapper.cpp'           ,
				'MOAIDeserializer.cpp'             ,
				'MOAIDraw.cpp'                   ,
				'MOAIEaseDriver.cpp'             ,
				'MOAIEaseType.cpp'               ,
				'MOAIEnvironment.cpp'            ,
				'MOAIEventSource.cpp'            ,
				'MOAIFileSystem.cpp'             ,
				'MOAIFont.cpp'                   ,
				'MOAIFrameBuffer.cpp'            ,
				'MOAIFreetypeFontRipper.cpp'     ,
				'MOAIGfxDevice.cpp'              ,
				'MOAIGfxQuad2D.cpp'              ,
				'MOAIGfxQuadDeck2D.cpp'          ,
				'MOAIGfxQuadListDeck2D.cpp'      ,
				'MOAIGfxResource.cpp'            ,
				'MOAIGlobals.cpp'           	 ,
				'MOAIGlyph.cpp'                  ,
				'MOAIGrid.cpp'                   ,
				'MOAIGridSpace.cpp'              ,
				'MOAIHttpTask.cpp'               ,
				'MOAIHttpTaskInfo_nacl.cpp' 	 ,
				'MOAIImage.cpp'                  ,
				'MOAIImage-jpg.cpp'                  ,
				'MOAIImage-png.cpp'                  ,
				'MOAIIndexBuffer.cpp'            ,
				'MOAIInputDevice.cpp'            ,
				'MOAIInputMgr.cpp'               ,
				'MOAIJoystickSensor.cpp'         ,
				'MOAIJsonParser.cpp'             ,
				'MOAIKeyboardSensor.cpp'         ,
				'MOAILayer2D.cpp'                ,
				'MOAILayerBridge2D.cpp'          ,
				'MOAILayoutFrame.cpp'            ,
				'MOAILineBrush.cpp'              ,
				'MOAILocationSensor.cpp'         ,
				'MOAILogMessages.cpp'            ,
				'MOAILogMgr.cpp'                 ,
				'MOAILuaObject.cpp'         	 ,
				'MOAILuaRef.cpp'            	 ,
				'MOAILuaRuntime.cpp'        	 ,
				'MOAILuaState.cpp'          	 ,
				'MOAILuaStateHandle.cpp'    	 ,
				'MOAIMesh.cpp'                   ,
				'MOAIMotionSensor.cpp'           ,
				'MOAINode.cpp'                   ,
				'MOAINodeMgr.cpp'                ,
				'MOAIObject.cpp'            	 ,
				'MOAIParser.cpp'                 ,
				'MOAIParticleDistanceEmitter.cpp',
				'MOAIParticleEmitter.cpp'        ,
				'MOAIParticleForce.cpp'          ,
				'MOAIParticlePlugin.cpp'         ,
				'MOAIParticleScript.cpp'         ,
				'MOAIParticleState.cpp'          ,
				'MOAIParticleSystem.cpp'         ,
				'MOAIParticleTimedEmitter.cpp'   ,
				'MOAIPartition.cpp'              ,
				'MOAIPartitionCell.cpp'          ,
				'MOAIPartitionLayer.cpp'         ,
				'MOAIPartitionResultBuffer.cpp'  ,
				'MOAIPartitionResultMgr.cpp'     ,
				'MOAIPointerSensor.cpp'          ,
				'MOAIProp.cpp'                   ,
				'MOAIProp2D.cpp'                 ,
				'MOAIQuadBrush.cpp'              ,
				'MOAIRtti.cpp'              	 ,
				'MOAIScriptDeck.cpp'             ,
				'MOAIScriptNode.cpp'             ,
				'MOAISensor.cpp'                 ,
				'MOAISerializer.cpp'             ,
				'MOAISerializerBase.cpp'         ,
				'MOAIShader.cpp'                 ,
				'MOAIShaderMgr.cpp'              ,
				'MOAISim.cpp'                    ,
				#'MOAISocialConnect.cpp'          ,
				'MOAIStretchPatch2D.cpp'         ,
				'MOAISurfaceDeck2D.cpp'          ,
				'MOAISurfaceSampler2D.cpp'       ,
				'MOAITextBox.cpp'                ,
				'MOAITextFrame.cpp'              ,
				'MOAITextLayout.cpp'             ,
				'MOAITexture.cpp'                ,
				'MOAIThread.cpp'                 ,
				'MOAITileDeck2D.cpp'             ,
				'MOAITileFlags.cpp'              ,
				'MOAITimer.cpp'                  ,
				'MOAITouchSensor.cpp'            ,
				'MOAITransform.cpp'              ,
				'MOAITransformBase.cpp'          ,
				'MOAIUrlMgr_nacl.cpp'       	 ,
				'MOAIVertexBuffer.cpp'           ,
				'MOAIVertexFormat.cpp'           ,
				'MOAIVertexFormatMgr.cpp'        ,
				'MOAIViewport.cpp'               ,
				'MOAIWheelSensor.cpp'            ,
				'MOAIXmlParser.cpp'              ,
]]

moaiextuntz_sources = [ os.path.join('moaiext-untz', src_file) for src_file in [ 
				'MOAIUntzSystem.cpp'              ,
]]
		
moaiextfmod_sources = [ os.path.join('moaiext-fmod', src_file) for src_file in [ 
				'MOAIFmod.cpp'              ,
				'MOAIFmodChannel.cpp'       ,
				'MOAIFmodSound.cpp'         ,
]]

nacl_moai_sources = [ 'NaClHost.cpp',
				 'geturl_handler.cc',
				 'NaClFileSystem.cpp',
				 'NaClFile.cpp',
				 'opengl_context.cc',
				 'MOAIApp.cpp',
				 ]

sources = zlib_sources + tinyxml_sources + libjpg_sources + jansson_sources + tlsf_sources + expat_sources + libpng_sources + contrib_sources + zipfs_sources + box2d_sources + uslcore_sources + uslext_sources + aku_sources + moaiextfmod_sources + moai_sources  + nacl_moai_sources

nacl_env.Append ( LIBS=['ppapi_gles2','libnosys','libfmodex', 'ppapi_cpp', 'libpthread' ] )

nacl_env.Append ( CPPDEFINES=['MOAI_OS_NACL','HAVE_MEMMOVE','__linux', 'NACL', 'USE_CURL=0','USE_CHIPMUNK=0','USE_OPENGLES1=0','USE_FREETYPE=0'] )

nacl_env["CPPPATH"] = [ 'lua-5.1.3/src', 
                        'box2d-2.2.1', 
						'chipmunk-5.3.4/include', 
						'physfs-2.0.2',
						'sqlite-3.6.16',
						'expat-2.0.1/lib',
						'tinyxml',
						'lpng140',
						'zlib-1.2.3',
						'hmac_sha1',
						'jansson-2.1/src',
						'fmodapi43800nacl/api/inc',
						'openssl-1.0.0d/include-android',
						'openssl-1.0.0d/crypto',
						'tlsf-2.0',
						'jpeg-8c',
						'zipfs',
						'.' ]

#nacl_env.Append ( CCFLAGS = ['-include /src/zipfs/zipfs_replace.h'] )

nacl_env.AllNaClModules( sources, 'moai' )
